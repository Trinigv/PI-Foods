{"ast":null,"code":"// constants\nvar HTML = 'html';\nvar HEAD = 'head';\nvar BODY = 'body';\nvar FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\n\nvar HEAD_TAG_REGEX = /<head.*>/i;\nvar BODY_TAG_REGEX = /<body.*>/i; // falls back to `parseFromString` if `createHTMLDocument` cannot be used\n\nvar parseFromDocument = function () {\n  throw new Error('This browser does not support `document.implementation.createHTMLDocument`');\n};\n\nvar parseFromString = function () {\n  throw new Error('This browser does not support `DOMParser.prototype.parseFromString`');\n};\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\n\n\nif (typeof window.DOMParser === 'function') {\n  var domParser = new window.DOMParser();\n  var mimeType = 'text/html';\n  /**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n\n  parseFromString = function (html, tagName) {\n    if (tagName) {\n      html = '<' + tagName + '>' + html + '</' + tagName + '>';\n    }\n\n    return domParser.parseFromString(html, mimeType);\n  };\n\n  parseFromDocument = parseFromString;\n}\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\n\n\nif (document.implementation) {\n  var doc = document.implementation.createHTMLDocument();\n  /**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n\n  parseFromDocument = function (html, tagName) {\n    if (tagName) {\n      doc.documentElement.getElementsByTagName(tagName)[0].innerHTML = html;\n      return doc;\n    }\n\n    doc.documentElement.innerHTML = html;\n    return doc;\n  };\n}\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\n\n\nvar template = document.createElement('template');\nvar parseFromTemplate;\n\nif (template.content) {\n  /**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param  {string} html - The HTML string.\n   * @return {NodeList}\n   */\n  parseFromTemplate = function (html) {\n    template.innerHTML = html;\n    return template.content.childNodes;\n  };\n}\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param  {string}   html - HTML markup.\n * @return {NodeList}\n */\n\n\nfunction domparser(html) {\n  var firstTagName;\n  var match = html.match(FIRST_TAG_REGEX);\n\n  if (match && match[1]) {\n    firstTagName = match[1].toLowerCase();\n  }\n\n  var doc;\n  var element;\n  var elements;\n\n  switch (firstTagName) {\n    case HTML:\n      doc = parseFromString(html); // the created document may come with filler head/body elements,\n      // so make sure to remove them if they don't actually exist\n\n      if (!HEAD_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(HEAD)[0];\n\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      if (!BODY_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(BODY)[0];\n\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      return doc.getElementsByTagName(HTML);\n\n    case HEAD:\n    case BODY:\n      elements = parseFromDocument(html).getElementsByTagName(firstTagName); // if there's a sibling element, then return both elements\n\n      if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n        return elements[0].parentNode.childNodes;\n      }\n\n      return elements;\n    // low-level tag or text\n\n    default:\n      if (parseFromTemplate) {\n        return parseFromTemplate(html);\n      }\n\n      return parseFromDocument(html, BODY).getElementsByTagName(BODY)[0].childNodes;\n  }\n}\n\nmodule.exports = domparser;","map":{"version":3,"names":["HTML","HEAD","BODY","FIRST_TAG_REGEX","HEAD_TAG_REGEX","BODY_TAG_REGEX","parseFromDocument","Error","parseFromString","window","DOMParser","domParser","mimeType","html","tagName","document","implementation","doc","createHTMLDocument","documentElement","getElementsByTagName","innerHTML","template","createElement","parseFromTemplate","content","childNodes","domparser","firstTagName","match","toLowerCase","element","elements","test","parentNode","removeChild","module","exports"],"sources":["/Users/trinigval/Documents/PI-Foods2/PI-Food-main/client/node_modules/html-dom-parser/lib/client/domparser.js"],"sourcesContent":["// constants\nvar HTML = 'html';\nvar HEAD = 'head';\nvar BODY = 'body';\nvar FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\nvar HEAD_TAG_REGEX = /<head.*>/i;\nvar BODY_TAG_REGEX = /<body.*>/i;\n\n// falls back to `parseFromString` if `createHTMLDocument` cannot be used\nvar parseFromDocument = function () {\n  throw new Error(\n    'This browser does not support `document.implementation.createHTMLDocument`'\n  );\n};\n\nvar parseFromString = function () {\n  throw new Error(\n    'This browser does not support `DOMParser.prototype.parseFromString`'\n  );\n};\n\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\nif (typeof window.DOMParser === 'function') {\n  var domParser = new window.DOMParser();\n  var mimeType = 'text/html';\n\n  /**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromString = function (html, tagName) {\n    if (tagName) {\n      html = '<' + tagName + '>' + html + '</' + tagName + '>';\n    }\n\n    return domParser.parseFromString(html, mimeType);\n  };\n\n  parseFromDocument = parseFromString;\n}\n\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\nif (document.implementation) {\n  var doc = document.implementation.createHTMLDocument();\n\n  /**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromDocument = function (html, tagName) {\n    if (tagName) {\n      doc.documentElement.getElementsByTagName(tagName)[0].innerHTML = html;\n      return doc;\n    }\n\n    doc.documentElement.innerHTML = html;\n    return doc;\n  };\n}\n\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\nvar template = document.createElement('template');\nvar parseFromTemplate;\n\nif (template.content) {\n  /**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param  {string} html - The HTML string.\n   * @return {NodeList}\n   */\n  parseFromTemplate = function (html) {\n    template.innerHTML = html;\n    return template.content.childNodes;\n  };\n}\n\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param  {string}   html - HTML markup.\n * @return {NodeList}\n */\nfunction domparser(html) {\n  var firstTagName;\n  var match = html.match(FIRST_TAG_REGEX);\n\n  if (match && match[1]) {\n    firstTagName = match[1].toLowerCase();\n  }\n\n  var doc;\n  var element;\n  var elements;\n\n  switch (firstTagName) {\n    case HTML:\n      doc = parseFromString(html);\n\n      // the created document may come with filler head/body elements,\n      // so make sure to remove them if they don't actually exist\n      if (!HEAD_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(HEAD)[0];\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      if (!BODY_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(BODY)[0];\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      return doc.getElementsByTagName(HTML);\n\n    case HEAD:\n    case BODY:\n      elements = parseFromDocument(html).getElementsByTagName(firstTagName);\n\n      // if there's a sibling element, then return both elements\n      if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n        return elements[0].parentNode.childNodes;\n      }\n      return elements;\n\n    // low-level tag or text\n    default:\n      if (parseFromTemplate) {\n        return parseFromTemplate(html);\n      }\n\n      return parseFromDocument(html, BODY).getElementsByTagName(BODY)[0]\n        .childNodes;\n  }\n}\n\nmodule.exports = domparser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}